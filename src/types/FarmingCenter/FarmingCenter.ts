// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DepositTransferred extends ethereum.Event {
  get params(): DepositTransferred__Params {
    return new DepositTransferred__Params(this);
  }
}

export class DepositTransferred__Params {
  _event: DepositTransferred;

  constructor(event: DepositTransferred) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FarmingCenter__collectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class FarmingCenter__collectInputParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get amount0Max(): BigInt {
    return this[2].toBigInt();
  }

  get amount1Max(): BigInt {
    return this[3].toBigInt();
  }
}

export class FarmingCenter__collectRewardsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReward(): BigInt {
    return this.value0;
  }

  getBonusReward(): BigInt {
    return this.value1;
  }
}

export class FarmingCenter__collectRewardsInputKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get startTime(): BigInt {
    return this[3].toBigInt();
  }

  get endTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class FarmingCenter__depositsResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getL2TokenId(): BigInt {
    return this.value0;
  }

  getNumberOfFarms(): BigInt {
    return this.value1;
  }

  getInLimitFarming(): boolean {
    return this.value2;
  }

  getOwner(): Address {
    return this.value3;
  }
}

export class FarmingCenter__l2NftsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;

  constructor(value0: BigInt, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getNonce(): BigInt {
    return this.value0;
  }

  getOperator(): Address {
    return this.value1;
  }

  getTokenId(): BigInt {
    return this.value2;
  }
}

export class FarmingCenter__virtualPoolAddressesResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getLimitVP(): Address {
    return this.value0;
  }

  getEternalVP(): Address {
    return this.value1;
  }
}

export class FarmingCenter extends ethereum.SmartContract {
  static bind(address: Address): FarmingCenter {
    return new FarmingCenter("FarmingCenter", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  WNativeToken(): Address {
    let result = super.call("WNativeToken", "WNativeToken():(address)", []);

    return result[0].toAddress();
  }

  try_WNativeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("WNativeToken", "WNativeToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  claimReward(
    rewardToken: Address,
    to: Address,
    amountRequestedIncentive: BigInt,
    amountRequestedEternal: BigInt
  ): BigInt {
    let result = super.call(
      "claimReward",
      "claimReward(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amountRequestedIncentive),
        ethereum.Value.fromUnsignedBigInt(amountRequestedEternal)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimReward(
    rewardToken: Address,
    to: Address,
    amountRequestedIncentive: BigInt,
    amountRequestedEternal: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimReward",
      "claimReward(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amountRequestedIncentive),
        ethereum.Value.fromUnsignedBigInt(amountRequestedEternal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collect(
    params: FarmingCenter__collectInputParamsStruct
  ): FarmingCenter__collectResult {
    let result = super.call(
      "collect",
      "collect((uint256,address,uint128,uint128)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );

    return new FarmingCenter__collectResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collect(
    params: FarmingCenter__collectInputParamsStruct
  ): ethereum.CallResult<FarmingCenter__collectResult> {
    let result = super.tryCall(
      "collect",
      "collect((uint256,address,uint128,uint128)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FarmingCenter__collectResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  collectRewards(
    key: FarmingCenter__collectRewardsInputKeyStruct,
    tokenId: BigInt
  ): FarmingCenter__collectRewardsResult {
    let result = super.call(
      "collectRewards",
      "collectRewards((address,address,address,uint256,uint256),uint256):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return new FarmingCenter__collectRewardsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collectRewards(
    key: FarmingCenter__collectRewardsInputKeyStruct,
    tokenId: BigInt
  ): ethereum.CallResult<FarmingCenter__collectRewardsResult> {
    let result = super.tryCall(
      "collectRewards",
      "collectRewards((address,address,address,uint256,uint256),uint256):(uint256,uint256)",
      [
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FarmingCenter__collectRewardsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  deposits(param0: BigInt): FarmingCenter__depositsResult {
    let result = super.call(
      "deposits",
      "deposits(uint256):(uint256,uint32,bool,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new FarmingCenter__depositsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toAddress()
    );
  }

  try_deposits(
    param0: BigInt
  ): ethereum.CallResult<FarmingCenter__depositsResult> {
    let result = super.tryCall(
      "deposits",
      "deposits(uint256):(uint256,uint32,bool,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FarmingCenter__depositsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toAddress()
      )
    );
  }

  eternalFarming(): Address {
    let result = super.call("eternalFarming", "eternalFarming():(address)", []);

    return result[0].toAddress();
  }

  try_eternalFarming(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "eternalFarming",
      "eternalFarming():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  farmingCenterVault(): Address {
    let result = super.call(
      "farmingCenterVault",
      "farmingCenterVault():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_farmingCenterVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "farmingCenterVault",
      "farmingCenterVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseCumulative(blockTimestamp: BigInt): i32 {
    let result = super.call(
      "increaseCumulative",
      "increaseCumulative(uint32):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(blockTimestamp)]
    );

    return result[0].toI32();
  }

  try_increaseCumulative(blockTimestamp: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "increaseCumulative",
      "increaseCumulative(uint32):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(blockTimestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  l2Nfts(param0: BigInt): FarmingCenter__l2NftsResult {
    let result = super.call(
      "l2Nfts",
      "l2Nfts(uint256):(uint96,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new FarmingCenter__l2NftsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_l2Nfts(param0: BigInt): ethereum.CallResult<FarmingCenter__l2NftsResult> {
    let result = super.tryCall(
      "l2Nfts",
      "l2Nfts(uint256):(uint96,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FarmingCenter__l2NftsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  limitFarming(): Address {
    let result = super.call("limitFarming", "limitFarming():(address)", []);

    return result[0].toAddress();
  }

  try_limitFarming(): ethereum.CallResult<Address> {
    let result = super.tryCall("limitFarming", "limitFarming():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonfungiblePositionManager(): Address {
    let result = super.call(
      "nonfungiblePositionManager",
      "nonfungiblePositionManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_nonfungiblePositionManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nonfungiblePositionManager",
      "nonfungiblePositionManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC721Received(
    param0: Address,
    from: Address,
    tokenId: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    from: Address,
    tokenId: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  virtualPoolAddresses(
    pool: Address
  ): FarmingCenter__virtualPoolAddressesResult {
    let result = super.call(
      "virtualPoolAddresses",
      "virtualPoolAddresses(address):(address,address)",
      [ethereum.Value.fromAddress(pool)]
    );

    return new FarmingCenter__virtualPoolAddressesResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_virtualPoolAddresses(
    pool: Address
  ): ethereum.CallResult<FarmingCenter__virtualPoolAddressesResult> {
    let result = super.tryCall(
      "virtualPoolAddresses",
      "virtualPoolAddresses(address):(address,address)",
      [ethereum.Value.fromAddress(pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FarmingCenter__virtualPoolAddressesResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _limitFarming(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _eternalFarming(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _nonfungiblePositionManager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _farmingCenterVault(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amountRequestedIncentive(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountRequestedEternal(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get reward(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get params(): CollectCallParamsStruct {
    return changetype<CollectCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectCallParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get amount0Max(): BigInt {
    return this[2].toBigInt();
  }

  get amount1Max(): BigInt {
    return this[3].toBigInt();
  }
}

export class CollectRewardsCall extends ethereum.Call {
  get inputs(): CollectRewardsCall__Inputs {
    return new CollectRewardsCall__Inputs(this);
  }

  get outputs(): CollectRewardsCall__Outputs {
    return new CollectRewardsCall__Outputs(this);
  }
}

export class CollectRewardsCall__Inputs {
  _call: CollectRewardsCall;

  constructor(call: CollectRewardsCall) {
    this._call = call;
  }

  get key(): CollectRewardsCallKeyStruct {
    return changetype<CollectRewardsCallKeyStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CollectRewardsCall__Outputs {
  _call: CollectRewardsCall;

  constructor(call: CollectRewardsCall) {
    this._call = call;
  }

  get reward(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get bonusReward(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectRewardsCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get startTime(): BigInt {
    return this[3].toBigInt();
  }

  get endTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class ConnectVirtualPoolCall extends ethereum.Call {
  get inputs(): ConnectVirtualPoolCall__Inputs {
    return new ConnectVirtualPoolCall__Inputs(this);
  }

  get outputs(): ConnectVirtualPoolCall__Outputs {
    return new ConnectVirtualPoolCall__Outputs(this);
  }
}

export class ConnectVirtualPoolCall__Inputs {
  _call: ConnectVirtualPoolCall;

  constructor(call: ConnectVirtualPoolCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newVirtualPool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConnectVirtualPoolCall__Outputs {
  _call: ConnectVirtualPoolCall;

  constructor(call: ConnectVirtualPoolCall) {
    this._call = call;
  }
}

export class CrossCall extends ethereum.Call {
  get inputs(): CrossCall__Inputs {
    return new CrossCall__Inputs(this);
  }

  get outputs(): CrossCall__Outputs {
    return new CrossCall__Outputs(this);
  }
}

export class CrossCall__Inputs {
  _call: CrossCall;

  constructor(call: CrossCall) {
    this._call = call;
  }

  get nextTick(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get zeroToOne(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class CrossCall__Outputs {
  _call: CrossCall;

  constructor(call: CrossCall) {
    this._call = call;
  }
}

export class EnterFarmingCall extends ethereum.Call {
  get inputs(): EnterFarmingCall__Inputs {
    return new EnterFarmingCall__Inputs(this);
  }

  get outputs(): EnterFarmingCall__Outputs {
    return new EnterFarmingCall__Outputs(this);
  }
}

export class EnterFarmingCall__Inputs {
  _call: EnterFarmingCall;

  constructor(call: EnterFarmingCall) {
    this._call = call;
  }

  get key(): EnterFarmingCallKeyStruct {
    return changetype<EnterFarmingCallKeyStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokensLocked(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get isLimit(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class EnterFarmingCall__Outputs {
  _call: EnterFarmingCall;

  constructor(call: EnterFarmingCall) {
    this._call = call;
  }
}

export class EnterFarmingCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get startTime(): BigInt {
    return this[3].toBigInt();
  }

  get endTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class ExitFarmingCall extends ethereum.Call {
  get inputs(): ExitFarmingCall__Inputs {
    return new ExitFarmingCall__Inputs(this);
  }

  get outputs(): ExitFarmingCall__Outputs {
    return new ExitFarmingCall__Outputs(this);
  }
}

export class ExitFarmingCall__Inputs {
  _call: ExitFarmingCall;

  constructor(call: ExitFarmingCall) {
    this._call = call;
  }

  get key(): ExitFarmingCallKeyStruct {
    return changetype<ExitFarmingCallKeyStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get isLimit(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ExitFarmingCall__Outputs {
  _call: ExitFarmingCall;

  constructor(call: ExitFarmingCall) {
    this._call = call;
  }
}

export class ExitFarmingCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get bonusRewardToken(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get startTime(): BigInt {
    return this[3].toBigInt();
  }

  get endTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class IncreaseCumulativeCall extends ethereum.Call {
  get inputs(): IncreaseCumulativeCall__Inputs {
    return new IncreaseCumulativeCall__Inputs(this);
  }

  get outputs(): IncreaseCumulativeCall__Outputs {
    return new IncreaseCumulativeCall__Outputs(this);
  }
}

export class IncreaseCumulativeCall__Inputs {
  _call: IncreaseCumulativeCall;

  constructor(call: IncreaseCumulativeCall) {
    this._call = call;
  }

  get blockTimestamp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IncreaseCumulativeCall__Outputs {
  _call: IncreaseCumulativeCall;

  constructor(call: IncreaseCumulativeCall) {
    this._call = call;
  }

  get status(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RefundNativeTokenCall extends ethereum.Call {
  get inputs(): RefundNativeTokenCall__Inputs {
    return new RefundNativeTokenCall__Inputs(this);
  }

  get outputs(): RefundNativeTokenCall__Outputs {
    return new RefundNativeTokenCall__Outputs(this);
  }
}

export class RefundNativeTokenCall__Inputs {
  _call: RefundNativeTokenCall;

  constructor(call: RefundNativeTokenCall) {
    this._call = call;
  }
}

export class RefundNativeTokenCall__Outputs {
  _call: RefundNativeTokenCall;

  constructor(call: RefundNativeTokenCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SweepTokenCall extends ethereum.Call {
  get inputs(): SweepTokenCall__Inputs {
    return new SweepTokenCall__Inputs(this);
  }

  get outputs(): SweepTokenCall__Outputs {
    return new SweepTokenCall__Outputs(this);
  }
}

export class SweepTokenCall__Inputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountMinimum(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SweepTokenCall__Outputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnwrapWNativeTokenCall extends ethereum.Call {
  get inputs(): UnwrapWNativeTokenCall__Inputs {
    return new UnwrapWNativeTokenCall__Inputs(this);
  }

  get outputs(): UnwrapWNativeTokenCall__Outputs {
    return new UnwrapWNativeTokenCall__Outputs(this);
  }
}

export class UnwrapWNativeTokenCall__Inputs {
  _call: UnwrapWNativeTokenCall;

  constructor(call: UnwrapWNativeTokenCall) {
    this._call = call;
  }

  get amountMinimum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UnwrapWNativeTokenCall__Outputs {
  _call: UnwrapWNativeTokenCall;

  constructor(call: UnwrapWNativeTokenCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
